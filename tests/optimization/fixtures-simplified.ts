/**
 * @fileoverview Simplified test fixtures for optimization tests - Phase PW-7.1 
 * @lastmodified 2025-08-26T21:15:00Z
 *
 * Features: Clean test data fixtures with proper type alignment
 * Main APIs: Template fixtures, PromptWizard result mocks
 * Constraints: TypeScript test fixtures aligned with actual PromptWizard types
 * Patterns: Factory pattern for consistent test data
 */

import { Template } from '../../src/types';
import { 
  OptimizationConfig,
  OptimizedResult
} from '../../src/integrations/promptwizard/types';

/**
 * Template fixture categories
 */
export enum TemplateCategory {
  SIMPLE = 'simple',
  COMPLEX = 'complex',
  CODING = 'coding',
  ANALYSIS = 'analysis',
  CREATIVE = 'creative'
}

/**
 * Simplified template fixtures
 */
export class TemplateFixtures {
  static createSimpleTemplate(id: string = 'simple-template'): Template {
    return {
      id,
      name: 'Simple Greeting Template',
      content: 'Hello {{name}}, welcome to {{platform}}! How can I help you with {{task}} today?',
      variables: {
        name: 'string',
        platform: 'string',
        task: 'string'
      },
      category: TemplateCategory.SIMPLE,
      version: '1.0.0',
      author: 'test@example.com',
      description: 'A simple greeting template for testing basic optimization'
    };
  }

  static createComplexTemplate(id: string = 'complex-template'): Template {
    return {
      id,
      name: 'Advanced Customer Support Template',
      content: `# Customer Support Assistant

Hello {{customer.name}},

{{#if customer.isPremium}}
Thank you for being a premium customer! We prioritize your support requests.
{{else}}
Thank you for contacting our support team.
{{/if}}

## Issue Details
- Category: {{issue.category}}
- Priority: {{issue.priority}}

{{#each troubleshooting.steps}}
**Step {{@index}}:** {{this.description}}
{{/each}}

Best regards,
{{agent.name}}`,
      variables: {
        'customer.name': 'string',
        'customer.isPremium': 'boolean',
        'issue.category': 'string',
        'issue.priority': 'string',
        'troubleshooting.steps': 'array',
        'agent.name': 'string'
      },
      category: TemplateCategory.COMPLEX,
      version: '2.0.0',
      author: 'support@example.com',
      description: 'Complex customer support template with conditionals'
    };
  }

  static createCodingTemplate(id: string = 'coding-template'): Template {
    return {
      id,
      name: 'Code Review Assistant',
      content: `# Code Review for {{project.name}}

You are reviewing {{language}} code for a {{project.type}} project.

\`\`\`{{language}}
{{code.content}}
\`\`\`

Please analyze the code for bugs, security issues, and best practices.`,
      variables: {
        'project.name': 'string',
        'project.type': 'string',
        'code.content': 'string',
        'language': 'string'
      },
      category: TemplateCategory.CODING,
      version: '1.0.0',
      author: 'dev@example.com',
      description: 'Code review template for development workflows'
    };
  }

  static createAnalysisTemplate(id: string = 'analysis-template'): Template {
    return {
      id,
      name: 'Data Analysis Report',
      content: `# {{report.title}} - Data Analysis Report

## Executive Summary
Analysis of {{dataset.name}} covering {{analysis.period}}.

## Key Findings
{{#each keyFindings}}
**{{this.category}}**: {{this.description}}
{{/each}}

Generated by {{analyst.name}}`,
      variables: {
        'report.title': 'string',
        'dataset.name': 'string',
        'analysis.period': 'string',
        'keyFindings': 'array',
        'analyst.name': 'string'
      },
      category: TemplateCategory.ANALYSIS,
      version: '1.0.0',
      author: 'analyst@example.com',
      description: 'Data analysis report template'
    };
  }

  static createCreativeTemplate(id: string = 'creative-template'): Template {
    return {
      id,
      name: 'Story Writing Assistant',
      content: `# {{story.title}}

*Genre: {{story.genre}}*

## Story Premise
{{story.premise}}

## Characters
{{#each characters}}
**{{this.name}}** - {{this.role}}
{{/each}}

Begin writing your story below:`,
      variables: {
        'story.title': 'string',
        'story.genre': 'string',
        'story.premise': 'string',
        'characters': 'array'
      },
      category: TemplateCategory.CREATIVE,
      version: '1.0.0',
      author: 'writer@example.com',
      description: 'Creative writing template for story development'
    };
  }

  static getTemplateByCategory(category: TemplateCategory, id?: string): Template {
    const templateId = id || `${category}-template`;
    
    switch (category) {
      case TemplateCategory.SIMPLE:
        return this.createSimpleTemplate(templateId);
      case TemplateCategory.COMPLEX:
        return this.createComplexTemplate(templateId);
      case TemplateCategory.CODING:
        return this.createCodingTemplate(templateId);
      case TemplateCategory.ANALYSIS:
        return this.createAnalysisTemplate(templateId);
      case TemplateCategory.CREATIVE:
        return this.createCreativeTemplate(templateId);
      default:
        return this.createSimpleTemplate(templateId);
    }
  }

  static createBatchTemplates(count: number, category: TemplateCategory = TemplateCategory.SIMPLE): Template[] {
    const templates: Template[] = [];
    
    for (let i = 0; i < count; i++) {
      const id = `batch-${category}-${i}`;
      templates.push(this.getTemplateByCategory(category, id));
    }
    
    return templates;
  }
}

/**
 * Simplified optimization configuration factory
 */
export class OptimizationConfigFactory {
  static createBasicConfig(): OptimizationConfig {
    return {
      task: 'General purpose optimization',
      prompt: 'Test prompt for optimization',
      targetModel: 'gpt-4',
      mutateRefineIterations: 3,
      fewShotCount: 5,
      generateReasoning: true
    };
  }

  static createAdvancedConfig(): OptimizationConfig {
    return {
      task: 'Advanced template optimization',
      prompt: 'Complex test prompt with multiple variables and conditions',
      targetModel: 'gpt-4',
      mutateRefineIterations: 7,
      fewShotCount: 15,
      generateReasoning: true,
      metadata: {
        templateId: 'advanced-template',
        templateName: 'Advanced Template',
        version: '1.0.0',
        author: 'test@example.com'
      }
    };
  }

  static createMinimalConfig(): OptimizationConfig {
    return {
      task: 'Basic optimization',
      prompt: 'Simple prompt',
      targetModel: 'gpt-3.5-turbo',
      mutateRefineIterations: 1,
      fewShotCount: 2,
      generateReasoning: false
    };
  }
}

/**
 * Simplified optimization result factory using PromptWizard OptimizedResult type
 */
export class OptimizationResultFactory {
  static createSuccessfulResult(templateId: string = 'test-template'): OptimizedResult {
    const jobId = `job-${templateId}-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`;
    const originalPrompt = this.generateRealisticPrompt();
    
    return {
      jobId,
      originalPrompt,
      optimizedPrompt: this.optimizeContent(originalPrompt),
      status: 'completed',
      metrics: {
        accuracyImprovement: 8.7,
        tokenReduction: 22.5,
        costReduction: 0.18,
        processingTime: 2.5,
        apiCallsUsed: 3
      },
      examples: [
        {
          input: 'Example task input',
          output: 'Example expected output'
        }
      ],
      reasoning: [
        'Step 1: Analyzed prompt structure', 
        'Step 2: Identified optimization opportunities',
        'Step 3: Applied token reduction techniques'
      ],
      createdAt: new Date(),
      completedAt: new Date()
    };
  }

  static createPartialSuccessResult(templateId: string = 'partial-template'): OptimizedResult {
    const result = this.createSuccessfulResult(templateId);
    
    // Modify to show partial success
    result.metrics.tokenReduction = 5.2;
    result.metrics.accuracyImprovement = 2.1;
    result.metrics.costReduction = 0.08;
    
    return result;
  }

  static createFailedOptimizationResult(templateId: string = 'failed-template'): OptimizedResult {
    const jobId = `job-${templateId}-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`;
    const originalPrompt = this.generateRealisticPrompt();
    
    return {
      jobId,
      originalPrompt,
      optimizedPrompt: originalPrompt, // No optimization occurred
      status: 'failed',
      metrics: {
        accuracyImprovement: -3.2,
        tokenReduction: -8.5,
        costReduction: -0.15,
        processingTime: 8.5,
        apiCallsUsed: 12
      },
      error: {
        code: 'OPTIMIZATION_FAILED',
        message: 'Unable to improve prompt quality',
        details: {
          reason: 'Semantic similarity check failed',
          attempts: 5
        }
      },
      createdAt: new Date(),
      completedAt: new Date()
    };
  }

  static createBatchResults(templateIds: string[]): OptimizedResult[] {
    return templateIds.map((id, index) => {
      // Mix success and failure results
      if (index % 5 === 0) {
        return this.createFailedOptimizationResult(id);
      } else if (index % 3 === 0) {
        return this.createPartialSuccessResult(id);
      } else {
        return this.createSuccessfulResult(id);
      }
    });
  }

  private static generateRealisticPrompt(): string {
    const prompts = [
      'You are a helpful assistant. Please {{task}} for the user.',
      'Generate a detailed response about {{topic}} including {{requirements}}.',
      'Act as {{role}} and provide {{output_type}} for {{context}}.',
      'Please analyze {{data}} and provide {{analysis_type}} with {{format}} format.',
      'Create {{deliverable}} for {{audience}} focusing on {{key_points}}.'
    ];
    return prompts[Math.floor(Math.random() * prompts.length)];
  }
  
  private static optimizeContent(content: string): string {
    return content
      .replace(/You are a helpful assistant\. Please/g, 'Please')
      .replace(/\s+/g, ' ')
      .trim();
  }
}

/**
 * Get available fixture categories
 */
export function getAvailableCategories(): TemplateCategory[] {
  return Object.values(TemplateCategory);
}

/**
 * Create randomized test data with consistent seed
 */
export function createRandomizedTestData(seed: number = Date.now()): {
  templates: Template[];
  configs: OptimizationConfig[];
  results: OptimizedResult[];
} {
  // Simple pseudo-random generator for consistent test data
  const random = (seed: number) => {
    const a = 1664525;
    const c = 1013904223;
    const m = 2 ** 32;
    seed = (a * seed + c) % m;
    return seed / m;
  };

  let currentSeed = seed;
  const nextRandom = () => {
    currentSeed = Math.floor(random(currentSeed) * 1000000);
    return random(currentSeed);
  };

  const categories = getAvailableCategories();
  const templateCount = Math.floor(nextRandom() * 10) + 5; // 5-15 templates
  
  const templates: Template[] = [];
  const configs: OptimizationConfig[] = [];
  const results: OptimizedResult[] = [];
  
  for (let i = 0; i < templateCount; i++) {
    const category = categories[Math.floor(nextRandom() * categories.length)];
    const template = TemplateFixtures.getTemplateByCategory(category, `random-${i}`);
    templates.push(template);
    
    const configType = nextRandom();
    let config: OptimizationConfig;
    if (configType < 0.33) {
      config = OptimizationConfigFactory.createMinimalConfig();
    } else if (configType < 0.66) {
      config = OptimizationConfigFactory.createBasicConfig();
    } else {
      config = OptimizationConfigFactory.createAdvancedConfig();
    }
    configs.push(config);
    
    const resultType = nextRandom();
    let result: OptimizedResult;
    if (resultType < 0.1) {
      result = OptimizationResultFactory.createFailedOptimizationResult(template.id || `template-${i}`);
    } else if (resultType < 0.3) {
      result = OptimizationResultFactory.createPartialSuccessResult(template.id || `template-${i}`);
    } else {
      result = OptimizationResultFactory.createSuccessfulResult(template.id || `template-${i}`);
    }
    results.push(result);
  }
  
  return { templates, configs, results };
}