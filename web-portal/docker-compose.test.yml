version: '3.8'

# Docker Compose configuration for CI/CD testing
services:
  # Test database
  postgres-test:
    image: postgres:15-alpine
    container_name: cursor-prompt-test-db
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: cursor_prompt_test
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d cursor_prompt_test"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - test-network

  # Test Redis instance
  redis-test:
    image: redis:7-alpine
    container_name: cursor-prompt-test-redis
    command: redis-server --appendonly no --save ""
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Backend for testing
  backend-test:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: cursor-prompt-test-backend
    environment:
      NODE_ENV: test
      PORT: 3001
      DATABASE_URL: postgresql://test:test@postgres-test:5432/cursor_prompt_test
      REDIS_URL: redis://redis-test:6379
      JWT_SECRET: test-jwt-secret-key
      ENCRYPTION_KEY: test-encryption-key-32-chars-long
      CLI_PATH: /app/dist/cli.js
      CORS_ORIGINS: http://frontend-test:3000
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - test-network

  # Frontend for testing
  frontend-test:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: cursor-prompt-test-frontend
    environment:
      NODE_ENV: production
      VITE_API_URL: http://backend-test:3001
    depends_on:
      backend-test:
        condition: service_healthy
    ports:
      - "4173:4173"
    networks:
      - test-network
    command: ["npm", "run", "preview", "--", "--host", "0.0.0.0"]

  # E2E test runner
  playwright:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: cursor-prompt-playwright
    environment:
      NODE_ENV: test
      BASE_URL: http://frontend-test:4173
      API_URL: http://backend-test:3001
      DATABASE_URL: postgresql://test:test@postgres-test:5432/cursor_prompt_test
      # Playwright specific
      PLAYWRIGHT_BROWSERS_PATH: /usr/lib/chromium
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    depends_on:
      postgres-test:
        condition: service_healthy
      backend-test:
        condition: service_healthy
      frontend-test:
        condition: service_started
    volumes:
      - ./playwright-report:/app/playwright-report
      - ./test-results:/app/test-results
    networks:
      - test-network
    command: |
      sh -c "
        echo '‚è≥ Waiting for services to be ready...'
        npx wait-on http://backend-test:3001/api/health http://frontend-test:4173 --timeout 60000
        echo 'üß™ Running E2E tests...'
        npx playwright test --config=playwright.config.ci.js
      "

networks:
  test-network:
    driver: bridge