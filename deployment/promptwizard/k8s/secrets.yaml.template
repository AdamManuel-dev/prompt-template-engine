/**
 * @fileoverview Kubernetes Secrets template for PromptWizard service
 * @lastmodified 2024-08-26T15:35:00Z
 * 
 * Features: Secure storage for sensitive configuration data
 * Main APIs: Kubernetes Secrets API for sensitive data management
 * Constraints: Base64 encoded values, managed via external secret management
 * Patterns: Secret rotation, external secret management integration
 */

# WARNING: This is a template file. Do not commit actual secrets to version control.
# Use tools like Sealed Secrets, External Secrets Operator, or Helm with encrypted values.

apiVersion: v1
kind: Secret
metadata:
  name: promptwizard-secrets
  namespace: promptwizard
  labels:
    app: promptwizard
    component: secrets
    version: v1
  annotations:
    description: "Sensitive configuration for PromptWizard service"
    # Rotation schedule annotation for secret management tools
    secret-rotation-schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
type: Opaque
data:
  # Application secrets (base64 encoded)
  SECRET_KEY: <BASE64_ENCODED_SECRET_KEY>
  JWT_SECRET: <BASE64_ENCODED_JWT_SECRET>
  API_KEY: <BASE64_ENCODED_API_KEY>
  
  # Database/Redis secrets
  REDIS_PASSWORD: <BASE64_ENCODED_REDIS_PASSWORD>
  
  # External API keys
  OPENAI_API_KEY: <BASE64_ENCODED_OPENAI_API_KEY>
  ANTHROPIC_API_KEY: <BASE64_ENCODED_ANTHROPIC_API_KEY>
  GOOGLE_API_KEY: <BASE64_ENCODED_GOOGLE_API_KEY>
  XAI_API_KEY: <BASE64_ENCODED_XAI_API_KEY>
  
  # Monitoring secrets
  GRAFANA_ADMIN_PASSWORD: <BASE64_ENCODED_GRAFANA_PASSWORD>
  
  # Email/SMTP credentials
  SMTP_USERNAME: <BASE64_ENCODED_SMTP_USERNAME>
  SMTP_PASSWORD: <BASE64_ENCODED_SMTP_PASSWORD>

---
# TLS certificates for secure communication
apiVersion: v1
kind: Secret
metadata:
  name: promptwizard-tls
  namespace: promptwizard
  labels:
    app: promptwizard
    component: tls
    version: v1
type: kubernetes.io/tls
data:
  tls.crt: <BASE64_ENCODED_CERTIFICATE>
  tls.key: <BASE64_ENCODED_PRIVATE_KEY>
  ca.crt: <BASE64_ENCODED_CA_CERTIFICATE>

---
# Docker registry credentials (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: promptwizard-registry
  namespace: promptwizard
  labels:
    app: promptwizard
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <BASE64_ENCODED_DOCKER_CONFIG>

---
# External Secrets Operator configuration (recommended approach)
# This replaces the above hardcoded secrets with dynamic secret management
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: promptwizard-secret-store
  namespace: promptwizard
  labels:
    app: promptwizard
    component: secret-store
spec:
  provider:
    # Example: AWS Secrets Manager
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: promptwizard-secret-manager

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: promptwizard-external-secrets
  namespace: promptwizard
  labels:
    app: promptwizard
    component: external-secrets
spec:
  secretStoreRef:
    name: promptwizard-secret-store
    kind: SecretStore
  target:
    name: promptwizard-secrets
    creationPolicy: Owner
  data:
  - secretKey: SECRET_KEY
    remoteRef:
      key: promptwizard/app-secret-key
  - secretKey: JWT_SECRET
    remoteRef:
      key: promptwizard/jwt-secret
  - secretKey: API_KEY
    remoteRef:
      key: promptwizard/api-key
  - secretKey: REDIS_PASSWORD
    remoteRef:
      key: promptwizard/redis-password
  - secretKey: OPENAI_API_KEY
    remoteRef:
      key: promptwizard/openai-api-key
  - secretKey: ANTHROPIC_API_KEY
    remoteRef:
      key: promptwizard/anthropic-api-key
  - secretKey: GOOGLE_API_KEY
    remoteRef:
      key: promptwizard/google-api-key
  - secretKey: XAI_API_KEY
    remoteRef:
      key: promptwizard/xai-api-key
  refreshInterval: 15m  # Refresh secrets every 15 minutes

---
# Service Account for secret management
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promptwizard-secret-manager
  namespace: promptwizard
  labels:
    app: promptwizard
    component: secret-manager
  annotations:
    # AWS IAM role annotation for IRSA
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/promptwizard-secret-manager-role

---
# Example: Sealed Secret (for GitOps workflows)
# Install sealed-secrets controller: kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.0/controller.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: promptwizard-sealed-secrets
  namespace: promptwizard
  labels:
    app: promptwizard
    component: sealed-secrets
spec:
  encryptedData:
    SECRET_KEY: <SEALED_SECRET_VALUE>
    JWT_SECRET: <SEALED_SECRET_VALUE>
    API_KEY: <SEALED_SECRET_VALUE>
    # ... other sealed secrets
  template:
    metadata:
      name: promptwizard-secrets
      namespace: promptwizard
    type: Opaque

---
# Instructions for secret management
# Create secrets using one of these methods:

# Method 1: kubectl create secret (for development/testing only)
# kubectl create secret generic promptwizard-secrets \
#   --from-literal=SECRET_KEY="your-secret-key" \
#   --from-literal=JWT_SECRET="your-jwt-secret" \
#   --from-literal=API_KEY="your-api-key" \
#   --from-literal=REDIS_PASSWORD="your-redis-password" \
#   --from-literal=OPENAI_API_KEY="your-openai-key" \
#   --from-literal=ANTHROPIC_API_KEY="your-anthropic-key" \
#   --namespace=promptwizard

# Method 2: Base64 encode and apply YAML (not recommended for production)
# echo -n "your-secret-value" | base64

# Method 3: Use External Secrets Operator (recommended for production)
# 1. Install External Secrets Operator
# 2. Configure secret store (AWS Secrets Manager, HashiCorp Vault, etc.)
# 3. Apply ExternalSecret resource above

# Method 4: Use Sealed Secrets for GitOps
# 1. Install Sealed Secrets controller
# 2. Create secret: echo -n "secret-value" | kubeseal -o yaml --scope cluster-wide
# 3. Apply SealedSecret resource