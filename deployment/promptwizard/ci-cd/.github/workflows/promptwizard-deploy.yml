name: PromptWizard Deployment Pipeline

# Trigger conditions
on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
    paths:
      - 'services/promptwizard-service/**'
      - 'deployment/promptwizard/**'
      - '.github/workflows/promptwizard-deploy.yml'

  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'services/promptwizard-service/**'
      - 'deployment/promptwizard/**'

  release:
    types: [published]

  # Manual workflow dispatch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

      rollback_version:
        description: 'Version to rollback to (leave empty for normal deployment)'
        required: false
        type: string

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: promptwizard-service
  PYTHON_VERSION: '3.11'
  KUBERNETES_VERSION: 'v1.28.0'

# Job definitions
jobs:
  # Environment and metadata setup
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.version.outputs.image_tag }}
      deploy_namespace: ${{ steps.env.outputs.deploy_namespace }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper versioning

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

          # Set namespace based on environment
          case "$environment" in
            production) echo "deploy_namespace=promptwizard-prod" >> $GITHUB_OUTPUT ;;
            staging) echo "deploy_namespace=promptwizard-staging" >> $GITHUB_OUTPUT ;;
            *) echo "deploy_namespace=promptwizard-dev" >> $GITHUB_OUTPUT ;;
          esac

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            # Generate semantic version from commit
            HASH=$(git rev-parse --short HEAD)
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9-]/-/g')
            VERSION="v1.0.0-${BRANCH}-${TIMESTAMP}-${HASH}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${VERSION}" >> $GITHUB_OUTPUT

      - name: Check deployment conditions
        id: check
        run: |
          SHOULD_DEPLOY="false"

          # Deploy conditions
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/develop" ]] || \
             [[ "${{ github.ref }}" == refs/heads/release/* ]] || \
             [[ "${{ github.event_name }}" == "release" ]]; then
            SHOULD_DEPLOY="true"
          fi

          echo "should_deploy=${SHOULD_DEPLOY}" >> $GITHUB_OUTPUT

  # Code quality and testing
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd services/promptwizard-service
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          cd services/promptwizard-service
          # Python linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

          # Type checking
          mypy . --ignore-missing-imports --show-error-codes

      - name: Run unit tests
        run: |
          cd services/promptwizard-service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: services/promptwizard-service/coverage.xml
          flags: promptwizard-service
          name: promptwizard-coverage

      - name: Run integration tests
        run: |
          cd services/promptwizard-service
          # Start test dependencies
          docker-compose -f docker-compose.test.yml up -d
          sleep 10

          # Run integration tests
          pytest tests/integration/ -v --tb=short

          # Cleanup
          docker-compose -f docker-compose.test.yml down

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run dependency security check
        run: |
          cd services/promptwizard-service
          pip install safety
          safety check -r requirements.txt --json --output safety-report.json || true

      - name: Run Bandit security scan
        run: |
          cd services/promptwizard-service
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            services/promptwizard-service/safety-report.json
            services/promptwizard-service/bandit-report.json

  # Container build and push
  build-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [setup, quality-gate, security-scan]
    if: needs.setup.outputs.should_deploy == 'true'

    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.setup.outputs.image_tag }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.setup.outputs.version }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/promptwizard/docker/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.setup.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ needs.setup.outputs.image_tag }}
          output-file: sbom.spdx.json
          format: spdx-json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Deployment to Kubernetes
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [setup, quality-gate, security-scan, build-push]
    if: needs.setup.outputs.should_deploy == 'true'
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: https://${{ needs.setup.outputs.environment }}.promptwizard.company.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: ${{ vars.KUBERNETES_CONTEXT }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ needs.setup.outputs.deploy_namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy secrets
        run: |
          # Apply secrets from external secret management
          envsubst < deployment/promptwizard/k8s/secrets.yaml.template | kubectl apply -f -
        env:
          NAMESPACE: ${{ needs.setup.outputs.deploy_namespace }}
          VERSION: ${{ needs.setup.outputs.version }}

      - name: Deploy ConfigMaps
        run: |
          kubectl apply -f deployment/promptwizard/k8s/configmap.yaml -n ${{ needs.setup.outputs.deploy_namespace }}

      - name: Deploy application
        run: |
          # Update image tag in deployment
          sed -i 's|image: promptwizard-service:latest|image: ${{ needs.setup.outputs.image_tag }}|g' deployment/promptwizard/k8s/deployment.yaml

          # Apply all Kubernetes manifests
          kubectl apply -f deployment/promptwizard/k8s/ -n ${{ needs.setup.outputs.deploy_namespace }}

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/promptwizard-service -n ${{ needs.setup.outputs.deploy_namespace }} --timeout=600s

      - name: Verify deployment health
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=promptwizard -n ${{ needs.setup.outputs.deploy_namespace }} --timeout=300s

          # Run health check
          kubectl get pods -l app=promptwizard -n ${{ needs.setup.outputs.deploy_namespace }}

          # Test service endpoint
          SERVICE_IP=$(kubectl get service promptwizard-service -n ${{ needs.setup.outputs.deploy_namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "$SERVICE_IP" ]]; then
            curl -f http://$SERVICE_IP/api/v1/health || exit 1
          fi

      - name: Run smoke tests
        run: |
          cd tests/smoke
          npm install
          npm run test:${{ needs.setup.outputs.environment }}
        env:
          API_BASE_URL: https://${{ needs.setup.outputs.environment }}.promptwizard.company.com
          API_KEY: ${{ secrets.API_KEY }}

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.setup.outputs.should_deploy == 'true' && needs.setup.outputs.environment != 'production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run load tests
        run: |
          cd tests/performance

          # Install k6
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

          # Run performance tests
          k6 run --env API_BASE_URL=https://${{ needs.setup.outputs.environment }}.promptwizard.company.com performance-test.js
        env:
          API_KEY: ${{ secrets.API_KEY }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/results/

  # Production deployment approval
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [setup, deploy, performance-test]
    if: needs.setup.outputs.environment == 'production'
    environment: production-approval

    steps:
      - name: Manual approval checkpoint
        run: |
          echo "Production deployment approved for version ${{ needs.setup.outputs.version }}"

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: setup
    if: failure() && needs.setup.outputs.should_deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: ${{ vars.KUBERNETES_CONTEXT }}

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          kubectl rollout undo deployment/promptwizard-service -n ${{ needs.setup.outputs.deploy_namespace }}
          kubectl rollout status deployment/promptwizard-service -n ${{ needs.setup.outputs.deploy_namespace }} --timeout=300s

      - name: Notify team of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '🚨 PromptWizard deployment rolled back in ${{ needs.setup.outputs.environment }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: always()

    steps:
      - name: Clean up old images
        run: |
          # Keep only the latest 10 images
          echo "Cleaning up old container images..."
          # This would typically be handled by a separate cleanup job or registry policy

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [setup, deploy, performance-test]
    if: always()

    steps:
      - name: Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ PromptWizard v${{ needs.setup.outputs.version }} deployed successfully to ${{ needs.setup.outputs.environment }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ PromptWizard deployment failed for ${{ needs.setup.outputs.environment }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
